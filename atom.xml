<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Runtime Will Tell]]></title>
  <link href="http://www.zacharydrossman.com/atom.xml" rel="self"/>
  <link href="http://www.zacharydrossman.com/"/>
  <updated>2014-07-17T09:12:13-04:00</updated>
  <id>http://www.zacharydrossman.com/</id>
  <author>
    <name><![CDATA[Zachary Drossman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I Write About When I Have Nothing to Write About]]></title>
    <link href="http://www.zacharydrossman.com/blog/2014/07/17/what-i-write-about-when-i-have-nothing-to-write-about/"/>
    <updated>2014-07-17T08:38:31-04:00</updated>
    <id>http://www.zacharydrossman.com/blog/2014/07/17/what-i-write-about-when-i-have-nothing-to-write-about</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/890/280"></p>

<p>Randomness: A tool that looked interesting: REVEAL.</p>

<p><img src="http://www.zacharydrossman.com/images/reveal-SS.png" /></p>

<p>30 day free trial; this tool will make reviewing complex views much simpler!</p>

<p>Chaos: A way to use UIActivityIndicators with AFNetworking.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UIActivityIndicatorView+AFNetworking.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">activityIndicator</span> <span class="nl">setAnimatingWithStateOfTask:</span><span class="n">task</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This automates the use of the activity indicator to start and stop as needed, instead of keeping a count of the number of operations that are downloading/uploading data!</p>

<p>Entropy: How to show a photo in Octopress that you have on your local machine:</p>

<p>1) First, put it into /source/images within the Octopress folder.</p>

<p>2) Use a PNG (maybe you can use other formats, but PNG should definitely work.)</p>

<p>3) Use classic HTML, ignore the format shown on the Octopress website!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/[Name of file]&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Parse and Core Data]]></title>
    <link href="http://www.zacharydrossman.com/blog/2014/07/10/integrating-parse-and-core-data/"/>
    <updated>2014-07-10T08:39:20-04:00</updated>
    <id>http://www.zacharydrossman.com/blog/2014/07/10/integrating-parse-and-core-data</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using this week&rsquo;s blog post to spur conversation about a topic in class. So if you are a reader who is not in my class, you may want to skip this one. Or comment. That would be great too.</p>

<p>Integration of Parse with Core Data seems to come up fairly often in conversation (what parties do I go to?).</p>

<p>So, I wanted to hypothesize here a bit on how I might do this. And in a future post, elaborate on how I actually did do it (if different / or more nuanced from the way I describe the process here)</p>

<p>I believe the most straightforward (I did not say most elegant) way to integrate core data and Parse is the following:</p>

<p>First a few prerequisites:</p>

<p>A) Do NOT use PFObject subclassing for your local objects.</p>

<p>B) Implement boilerplate core data code (with or without fetched results controller to your liking.)</p>

<p>C) Create a DataManager object that is a singleton.</p>

<p>Then, get started:</p>

<p>1) Write a category to each NSManagedObject that effectively takes the place of a custom initializer; this custom initializer will take each key/value pair from the PFObject and assign it to the appropriate attribute of the NSManagedObject. Like I said, this isn&rsquo;t the most elegant way of doing things. I have seen NSHipster articles and Github repos that suggest using NSValueTransformer, but I&rsquo;m not ready to metaprogram my process.</p>

<p>2) Write a method in DataManager that converts each NSManagedObject type back into a PFObject. (There will be one method for each type of NSManagedObject, like in step #1.)</p>

<p>3) Write a method in DataManager that creates a new NSManagedObject based on a PFObject and PFObject&rsquo;s class.</p>

<p>4) Call #3 from your ViewController; and then #1 from here as well.</p>

<p>5) When ready to save to Parse, call #2 from your ViewController.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regular Expressions My Ass.]]></title>
    <link href="http://www.zacharydrossman.com/blog/2014/07/02/regular-expressions-my-ass/"/>
    <updated>2014-07-02T22:07:33-04:00</updated>
    <id>http://www.zacharydrossman.com/blog/2014/07/02/regular-expressions-my-ass</id>
    <content type="html"><![CDATA[<p>Regular expressions are anything but. Here are some ways to remember how to use them via example.</p>

<p>First, the NSRegularExpression class, and how it is used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">phoneSentence</span> <span class="o">=</span> <span class="s">@&quot;My phone number is 555-1212&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSRegularExpression</span> <span class="o">*</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="s">@&quot;.&quot;</span> <span class="nl">options:</span><span class="n">NSRegularExpressionCaseInsensitive</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span><span class="o">*</span> <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">matchesInString:</span><span class="n">phoneSentence</span>                                      <span class="nl">options:</span><span class="n">NSMatchingWithoutAnchoringBounds</span>
</span><span class='line'>                                    <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">phoneSentence</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;All matches: %@&quot;</span><span class="p">,</span> <span class="n">matches</span><span class="p">);</span>
</span><span class='line'><span class="n">NSTextCheckingResult</span> <span class="o">*</span><span class="n">match</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">range</span><span class="p">;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">matchString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">phoneSentence</span> <span class="nl">substringFromIndex:</span><span class="n">range</span><span class="p">.</span><span class="n">location</span><span class="p">]</span> <span class="nl">substringToIndex:</span><span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">+</span> <span class="n">range</span><span class="p">.</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;First match: %@&quot;</span><span class="p">,</span><span class="n">matchString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code can be broken into the following parts:</p>

<p>1) + (NSRegularExpression <em>)regularExpressionWithPattern:(NSString </em>)pattern options:(NSRegularExpressionOptions)options error:(NSError **)error</p>

<p>Create a regular expression using NSRegularExpression. Consider options such as case insensitivity and continuation across lines (NSRegularExpressionDotMatchesLineSeparators). We did not record the error here, though you are certainly welcome to.</p>

<p>Our simple regex pattern here is &ldquo;.&rdquo;, which effectively means, find every individual character.</p>

<p>2) &ndash; (NSArray <em>)matchesInString:(NSString </em>)string options:(NSMatchingOptions)options range:(NSRange)range</p>

<p>This method returns an array of NSTextCheckingResults, or ranges in which matches were found.</p>

<p>3) Everything after this method</p>

<p>The rest of this code is simply meant to produce the expected result for the first match, which will be a capital &ldquo;M&rdquo;. What you do with the ranges once you have them is up to you. That&rsquo;s the easy part, because you are no longer dealing with regular expressions.</p>

<p>So what are some regular expression operators you should know?</p>

<p>{n} &ndash; match something exactly n times
{n, } &ndash; match at least n times (as many times as possible)
{n, m} &ndash; match between n and m times, inclusive
| &ndash; match either before or after the pipe</p>

<p>And what are some metacharacters you should know?</p>

<p>\d &ndash; Match any decimal digit in the Unicode set of characters
\D &ndash; Match any non decimal digit
\r &ndash; Match a carriage return
\s &ndash; Match a whitespace character
.  &ndash; Match any character
^  &ndash; Match only if at the beginning of the line
$  &ndash; Match only from the end of the line
\  &ndash; Character escape for the following characters: * ? + [ { } ( ) ^ $ | \ . /</p>

<p>So some nice regular expressions to have in your back pocket (please note I have not validated these!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">ssnRegex</span> <span class="o">=</span> <span class="s">@&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">emailRegex</span> <span class="o">=</span> <span class="s">@&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+</span><span class="se">\\</span><span class="s">.[A-Za-z]{2,6}&quot;</span><span class="p">;</span> <span class="c1">//1</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">htmltagRegex</span> <span class="o">=</span> <span class="s">@&quot;&lt;([a-z][a-z0-9]*)</span><span class="se">\b</span><span class="s">[^&gt;]*&gt;(.*?)&quot;&quot;; //2</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">phoneRegex</span> <span class="o">=</span> <span class="s">@&quot;^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$&quot;</span><span class="p">;</span> <span class="c1">//3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sources</p>

<p>1) <a href="http://stackoverflow.com/questions/800123/what-are-best-practices-for-validating-email-addresses-in-objective-c-for-ios-2">http://stackoverflow.com/questions/800123/what-are-best-practices-for-validating-email-addresses-in-objective-c-for-ios-2</a></p>

<p>2) <a href="http://www.raywenderlich.com/30288/nsregularexpression-tutorial-and-cheat-sheet">http://www.raywenderlich.com/30288/nsregularexpression-tutorial-and-cheat-sheet</a></p>

<p>3) <a href="http://stackoverflow.com/questions/123559/a-comprehensive-regex-for-phone-number-validation">http://stackoverflow.com/questions/123559/a-comprehensive-regex-for-phone-number-validation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build Your Own Completion Handler Method]]></title>
    <link href="http://www.zacharydrossman.com/blog/2014/06/24/how-to-build-your-own-completion-handler-method/"/>
    <updated>2014-06-24T23:45:58-04:00</updated>
    <id>http://www.zacharydrossman.com/blog/2014/06/24/how-to-build-your-own-completion-handler-method</id>
    <content type="html"><![CDATA[<p>What is a completion handler method?</p>

<p>So you&rsquo;re finally at the point in your app where you have to make a network call. Let&rsquo;s say your app downloads pictures of cats from the interwebs. A network call is the process of asking the web for something and then waiting for it to come back to you with what you asked for. Or not. What if the internet has no pictures of cats on it anywhere? In that case, your request will come back with nothing at all.</p>

<p>So, to prepare for these possibilities, we use completion handlers. Completion handlers tell us whether or not a certain process completed with the results we expected.</p>

<p>Step 1: Create a CompletionBlock typedef.</p>

<p>This step isn&rsquo;t crucial, but it will make your code look neater, so I recommend it.</p>

<p>You can think of a typedef as an alias. I&rsquo;m not sure that&rsquo;s a perfect analogy, but it&rsquo;ll do for now if this is your first typedef.</p>

<p>An example of a basic typedef:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef unsigned char BYTE;</span></code></pre></td></tr></table></div></figure>


<p>This typedef lets us use the word BYTE in place of &ldquo;unisigned char&rdquo; anytime we declare a variable.</p>

<p>For a block, our typedef might look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef void(^CompletionBlock)(NSArray *queryResult, NSError *error);</span></code></pre></td></tr></table></div></figure>


<p>NB: You might think you need a name for your completion block at the end of the typedef. I&rsquo;m not actually sure why you do not, but this will name it CompletionBlock, just as if you were writing a standard function.</p>

<p>Step2: Create a method that takes a Completion block as an argument, e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void) getObjectsInBackgroundWithBlock:(CompletionBlock)completionBlock;</span></code></pre></td></tr></table></div></figure>


<p>How we define this method is as follows (using pseudocode, since we don&rsquo;t have a specific use case in mind):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void) getObjectsInBackgroundWithBlock:(CompletionBlock)completionBlock
</span><span class='line'>{
</span><span class='line'>  // Run a request for information from a web source
</span><span class='line'>
</span><span class='line'>  dispatch_queue_t downloadQueue = dispatch_queue_create("Get our data", NULL);
</span><span class='line'>  dispatch_async(downloadQueue, ^{
</span><span class='line'>      NSError *error;
</span><span class='line'>      completionBlock(arrayOfDataFromDownload, error);
</span><span class='line'>      });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Step3: Now use the method!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)modifyWebData
</span><span class='line'>{
</span><span class='line'>  //assumes you have a shared data store, but if you don't you might have written the "getObjectsInBackgroundWithBlock:" method in the same file, in which case you can just call [self getObjects...]
</span><span class='line'>  
</span><span class='line'>  SharedDataStore *dataStore = [SharedDataStore sharedInstance]; //uses a singleton method in a class called SharedDataStore where the "getObjectsInBackgroundWithBlock:" method will be found.
</span><span class='line'>
</span><span class='line'>  [dataStore getObjectsInBackgroundWithBlock:^(NSArray *queryResult, NSError *error) {
</span><span class='line'>      //now do something with the queryResult data. If it were an image, maybe we'd resize it here, for instance.
</span><span class='line'>      //or get an error back and deal with that!
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>All that said, I wrote this blog to open up a discussion about good use of completion blocks, something I am still getting my head around. It sure does seem like modifyWebData does 2 things, and we all know that a method should only do one thing according to the single responsibility principle. So what now? For discussion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to: Roll Your Own Objective-C Database]]></title>
    <link href="http://www.zacharydrossman.com/blog/2014/06/16/how-to-roll-your-own-objective-c-database/"/>
    <updated>2014-06-16T09:55:34-04:00</updated>
    <id>http://www.zacharydrossman.com/blog/2014/06/16/how-to-roll-your-own-objective-c-database</id>
    <content type="html"><![CDATA[<p>First, a disclaimer: This is my first attempt at blogging in Octopress. Enough said. Surf my site at your own risk of getting frustrated. This disclaimer may have to appear on every blog post I create for the next few months too, but today&rsquo;s is particularly tenuous.</p>

<p>Second, another disclaimer: You will not see all of the code you would need to write in this post just yet. Though I plan to augment this post with additional code in the future. I have just learned how challenging it can be to write objective-c code without the support of Xcode&rsquo;s autocomplete feature! (It was always there to give me a push when I needed it.)</p>

<p>So, why would you roll your own Objective-C database? The Core Data API is built so you don&rsquo;t have to do this, but let&rsquo;s assume for a moment that you haven&rsquo;t gotten your head around Core Data yet and/or you don&rsquo;t wish to implement such a bulky framework to do a simple task. For example, let us say you need to be able to search the English dictionary (and don&rsquo;t wish to use Apple&rsquo;s autocorrect dictionary due to the many non-English words included in it.) Maybe you are building a scrabble game, for instance. For the sake of this discussion, assume you already have a text file that contains every word in the English language on its own line.</p>

<p>The quickest code you could write to search such a file might look like this (assuming you have already specified your filePath/fileEncoding):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createArrayOfEnglishWordsFromDictionaryFile</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">arrayOfAllWordsInTheEnglishLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">allWordsInTheEnglishLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfFile:</span><span class="n">filePath</span> <span class="nl">encoding:</span><span class="n">fileEncoding</span> <span class="nl">error:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">aWord</span> <span class="k">in</span> <span class="p">[</span><span class="n">allWordsInTheEnglishLanguage</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">arrayOfAllWordsInTheEnglishLanguage</span> <span class="nl">addObject:</span><span class="n">aWord</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//then go on to check the array for the word using NSPredicate or other method.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objective-C is blazingly fast when it searches an array, but loading a dataset that spans into the hundreds of thousands of objects on an iPhone in this fashion might take a little while, and would have to be done every time the game was loaded (if not every time the dictionary was to be searched.) And if you just want to load it once per game, you have to keep it all in memory to avoid the constant re-building of the array. Instead, imagine you could just search the file directly and speedily to see if the word being suggested on the board was an actual word.</p>

<p>Final(?) disclaimer: I cannot say with what speed iOS can access and interpret an external file. This may impede the value of my theory here. Feel free to comment on this if you are more familiar!</p>

<p>With that disclaimer out of the way you must reorganize the data in your file. And for this, you must read the entire file in the way I described in code above once, but only at the time of development (not while a user is accessing the program.) But given you will be storing a local copy of this dictionary on each user&rsquo;s phone, doing this once will be an unbelievable time-savings. I will not go through here how to reorganize your file in code at this time, but I will describe it in prose. The point of this post is to consider the gains in running time, and demonstrate some of the code, but perhaps I can come back later and elaborate on this step more explicitly.</p>

<p>One way to do this would be to assign each letter in each word its ASCII integer value, and add them up for each word, giving each word a score that can then be used as a key to place it in the back in the file appropriately. This score would then be placed to the left of the word it represents, such that it is the actual key for the word being searched; the code below assumes such a format.</p>

<p>E.g. The word AND would be equivalent to the scores 1 + 14 + 4, or 29.</p>

<p>Now all you need to do is run a recursive binary search on the file to discover whether the word that has been placed on the board is real or not, and you may run the search with runtime of much closer to 𝚯(log n)!</p>

<p>Here is a sample of what that code might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSInteger</span> <span class="n">numWordsInDictionary</span> <span class="o">=</span> <span class="mi">200000</span> <span class="c1">//assumes you know the number of lines (words) in the file for simplicity of the example</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">findWordInBinaryTreeDictionary:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">aWord</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">aWord</span> <span class="n">length</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span> <span class="o">+</span> <span class="p">[</span><span class="n">aWord</span> <span class="nl">characterAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="o">*</span><span class="n">foundSameIndexAsWordBeingSearched</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">recursiveBinarySearchOnDictionary:</span><span class="n">numWordsInDictionary</span><span class="o">/</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//finish this by adding code to check predecessors and successors for the same score. create an array of these and linearly (or with Cocoa API at faster speeds) search this subset only.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//a further enhancement for a game like scrabble might be to use the number of letters in the user&#39;s word as a secondary strategic sort key to further limit the number of words to be searched linearly.</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">recursiveBinarySearchOnDictionary:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">lineNumberToBeChecked</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">wordScoreOnLineNumber</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="nl">substringToIndex:</span><span class="p">[</span><span class="n">lineNumberToBeChecked</span> <span class="nl">rangeOfString:</span><span class="s">@&quot; &quot;</span><span class="p">]]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">wordScoreOnLineNumber</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lineNumberToBeChecked</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">wordScoreOnLineNumber</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">recursiveBinarySearchOnDictionary:</span><span class="n">lineNumberToBeChecked</span><span class="o">*</span><span class="mf">1.5</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">wordScoreOnLineNumber</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">wordScore</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">recursiveBinarySearchOnDictionary:</span><span class="n">lineNumberToBeChecked</span><span class="o">/</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using code similar to the above (which is pseudo code for sure, given this is an early draft post) you would then want to run steps to check the wordScore values on predecessor and successor line numbers in the file to then linearly search a subset of words for the word you are seeking. And voila, you will efficiently locate (or not locate) the set of characters the user has tried placing on your scrabble board and in turn, created your own basic database using a combination of binary search.</p>

<p>Other potential uses for such code include datasets of every geography in the world (of which some databases catalogue over two million inclusive of all levels of geography). Can you think of a few?</p>

<p>One final thought: Using alternative data structures such as balanced binary search trees might make this implementation more robust in cases where the dataset is mutable. But given we do not need to add/remove data from the English Dictionary example with significant frequency, we can be satisfied with the above method.</p>

<hr />
]]></content>
  </entry>
  
</feed>
